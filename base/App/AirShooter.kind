//  Criar inteligência artificial para o inimigo
//  A cada frame mover x distancias para baixo
//  App.AirShooter.when.enemy.move(enemy: App.AirShooter.Enemy, pos: App.AirShooter.Position): App.AirShooter.Position
//  new position
//
//  App.AirShooter.when.enemies.move(local: App.AirShooter.State.Local): App.AirShooter.State.Local
//    aplicar App.AirShooter.when.enemy.move a todos inimigos e atualizar sua posição na lista
//    let new_enemies = []
//      for enemy in enemies with new_enemies:
//        ?s
//
//  Criar o tipo projétil com projetil seu e do adversário (projétil do adversário guardando direção do tiro)
//  Criar inteligencia artificial para o projetil
//
//  Converter cada unidade em uma hitbox: Tipo Shape
//  Adicionar no when um for para conferir se algum projétil está atingindo alguém (apenas conferir se acerta do time adversário do dono do projetil)
//    Checar colisões com a função Shape.collision
//
//  Adicionar no tipo player informação de Cooldown no tiro
//  Adicionar no tipo local informação de se está atirando (shooting: Bool)
//  Adicionar no when para mudar local@shooting no mouse_down
//  Adicionar no when para mudar local@shooting no mouse_up
//  Adicionar no when para rodar App.AirShooter.when.player.shoot no frame
//  App.AirShooter.when.player.shoot(local: App.AirShooter.State.Local): App.AirShooter.State.Local
//    Conferir se o Cooldown do tiro está em 0, se sim, atirar
//    Se não, reduzir o cooldown em 1
//

//  npm i -g kind-lang-voxbox-maker
//  klvm Name.Space.Here [Z_index] [Z_scale]




// App states (local = clicks, global = visitors)
App.AirShooter.State: App.State
  App.State.new((App.AirShooter.State.Local), Unit)

type App.AirShooter.State.Local {
  new(
    player: App.AirShooter.Player
    enemies: Map<App.AirShooter.Enemy>
    mouse_over: String
    mouse_pos: Pair<U32, U32>
    bullets: List<App.AirShooter.Parts.Bullet>
    seed: Nat
    max_enemies: Nat
  )
}

App.AirShooter.Ship.Constructor(pos: App.AirShooter.Position, vel: F64, sprite: VoxBox, hue: U32, isPlayer: Bool, cooldown: U32): App.AirShooter.Ship
  let defaultBullet = App.AirShooter.Parts.Bullet.new(App.AirShooter.Sprites.Bullet, isPlayer, {0, 0}, 10.0, Shape.Circle.new(V2.new(pos@fst, pos@snd), 1.0))
  let defaultWeapon = App.AirShooter.Parts.Weapon.new(defaultBullet, cooldown, cooldown)

  App.AirShooter.Ship.new(
    pos,
    App.AirShooter.Parts.Engine.new(vel),
    sprite,
    hue,
    defaultWeapon
    Shape.Circle.new(V2.new(pos@fst, pos@snd), 5.0)
  )

App.AirShooter.Enemy.Constructor(seed: Nat): App.AirShooter.Enemy
  let x = Nat.to_f64(Nat.random_range(10, 256, seed))
  let vel = Nat.to_f64(Nat.random_range(1, 2, seed))
  let hue = Nat.to_u32(Nat.random_range(30, 255, seed))
  let cooldown = Nat.to_u32(Nat.random_range(60, 100, seed))
  let destination = {Nat.to_f64(Nat.random_range(10, 256, Nat.random(seed))), 256.0}

  App.AirShooter.Enemy.new(App.AirShooter.Ship.Constructor({x, 10.0}, vel, App.AirShooter.Sprites.Enemy_Ship, hue, false, cooldown), destination)

// Initial state
App.AirShooter.init: App.Init<App.AirShooter.State>
  let sprite = App.AirShooter.Sprites.Player_Ship
  let enemy_sprite = App.AirShooter.Sprites.Enemy_Ship

  let ship = App.AirShooter.Ship.Constructor({128.0, 100.0}, 2.5, sprite, 0, true, 7)

  let enemies = Map.new<App.AirShooter.Enemy>

  let player = App.AirShooter.Player.new(ship)
  let mouse_over = ""
  let mouse_pos  = {0, 0}
  let local = App.AirShooter.State.Local.new(player, enemies, mouse_over, mouse_pos, [], 0, 5)
  App.Store.new<App.AirShooter.State>(local, unit)

App.AirShooter.draw.canvas(local: App.AirShooter.State.Local, img: VoxBox): VoxBox
  let img = App.AirShooter.Ship.draw(local@player@ship, img)

  for key:enemy in local@enemies with img:
    App.AirShooter.Ship.draw(enemy@ship, img)

  for bullet in local@bullets with img:
    App.AirShooter.Parts.Bullet.draw(bullet, img)

  img


// Render function
App.AirShooter.draw(img: VoxBox): App.Draw<App.AirShooter.State>
  (state)
  let img = App.AirShooter.draw.canvas(state@local, img)
  <div style={
    "display": "flex"
    "justify-content": "center"
    "align-items": "center"
    "background-color": "#000000"
    }>
    {
      DOM.vbox(
        {
          "id": "game_screen",
          "width": "256",
          "height": "256",
          "scale": "4"
        }, {}, img)
    }
  </div>



// move all objects in canvas
App.AirShooter.when.move(local: App.AirShooter.State.Local): App.AirShooter.State.Local
  let mouse_pos = local@mouse_pos
  let des = {U32.to_f64(mouse_pos@fst / 4), U32.to_f64(mouse_pos@snd / 4)}
  //TODO: Se o movimento for muito curto, não executar movimento nenhum, para ela não ficar tremendo
  let local = local@player@ship <- App.AirShooter.Ship.move(des, local@player@ship)
  local


// make enemies shoot
App.AirShooter.frame.enemy(local: App.AirShooter.State.Local): App.AirShooter.State.Local
  // spawn new enemies
  let local = local@enemies <- if List.length!(Map.to_list!(local@enemies)) <=? local@max_enemies then
    let key = Nat.show(Nat.random(local@seed))

    if Map.has!(key, local@enemies) then local@enemies else Map.set!(key, App.AirShooter.Enemy.Constructor(local@seed), local@enemies)
  else local@enemies

  // enemies move and shoot
  for key:enemy in local@enemies with local:
    

    // move enemy
    let enemy = enemy@ship <- App.AirShooter.Ship.move(enemy@destination, enemy@ship)

    let local = local@enemies <- Map.set!(key, enemy, local@enemies)

    // enemy shoot
    let bullet = App.AirShooter.Ship.shoot(enemy@ship)
    case bullet {
      some:
        let enemy = enemy@ship@weapon@last_fired <- 0
        // let local = local@enemies <- local@enemies{key} <- enemy
        let local = local@enemies <- Map.set!(key, enemy, local@enemies)
        let local = local@bullets <- List.append!(local@bullets, bullet.value)
        local
    } default local

  local


// player shoot
App.AirShooter.when.shoot(local: App.AirShooter.State.Local): App.AirShooter.State.Local
  let bullet = App.AirShooter.Ship.shoot(local@player@ship)
  case bullet {
    some:
      let local = local@bullets <- List.append!(local@bullets, bullet.value)
      let local = local@player@ship@weapon@last_fired <- 0
      local
  } default local


  // move bullets
App.AirShooter.frame.bullet(local: App.AirShooter.State.Local): App.AirShooter.State.Local
  let local = local@bullets <-List.map!!(App.AirShooter.Parts.Bullet.move, local@bullets)
  local


// tick weapons cooldown
App.AirShooter.frame.cooldown(local: App.AirShooter.State.Local): App.AirShooter.State.Local
  let aux = (ship: App.AirShooter.Ship)
    let weapon = ship@weapon
    case U32.ltn(ship@weapon@last_fired, ship@weapon@cooldown) {
      true:
        let ship = ship@weapon@last_fired <- U32.inc(ship@weapon@last_fired)
        ship
    } default ship

  let f = (enemy: App.AirShooter.Enemy)
    let enemy = enemy@ship <- aux(enemy@ship)
    enemy

  for key:enemy in local@enemies with local:
    local@enemies <- Map.set!(key, f(enemy), local@enemies)

  let local = local@player@ship <- aux(local@player@ship)

  local

App.AirShooter.frame.garbage_collector(local: App.AirShooter.State.Local): App.AirShooter.State.Local
  let bullets = local@bullets
  let enemies = local@enemies

  let bullets = List.filter<App.AirShooter.Parts.Bullet>((bullet) F64.gtn(bullet@position@snd, 1.0), bullets)
  let bullets = List.filter<App.AirShooter.Parts.Bullet>((bullet) F64.ltn(bullet@position@snd, 256.0), bullets)

  for key:enemy in enemies with local:
    if F64.ltn(enemy@ship@position@snd, 256.0) then local else local@enemies <- Map.delete!(key, local@enemies)


  let local = local@bullets <- bullets

  let local = local@seed <- Nat.random(local@seed)

  local

// Event handler
App.AirShooter.when: App.When<App.AirShooter.State>
  (event, state)
  let local = state@local
  case event {
    init:
      let local = local@seed <- U64.to_nat(event.time)
      App.set_local!(local)
    mouse_down:
      let local = App.AirShooter.when.shoot(local)
      App.set_local!(local)
    frame:
      let local = App.AirShooter.when.move(local)
      let local = App.AirShooter.frame.enemy(local)
      let local = App.AirShooter.frame.bullet(local)
      let local = App.AirShooter.frame.cooldown(local)
      let local = App.AirShooter.frame.garbage_collector(local)

      let local = local@seed <- Nat.random(local@seed)

      App.set_local!(local)
    mouse_move:
      let local =
        if local@mouse_over =? "game_screen" then
          local@mouse_pos <- event.mouse_pos
        else
          local
      App.set_local!(local)
    mouse_over:
      let local = local@mouse_over <- event.id
      App.set_local!(local)

  } default App.pass!

// Global ticker: not used
App.AirShooter.tick: App.Tick<App.AirShooter.State>
  App.no_tick<App.AirShooter.State>

// Global visitor: counts posts to room_zero
App.AirShooter.post: App.Post<App.AirShooter.State>
  (time, room, addr, data, global_state)
  global_state

// A "AS, world!" + counter application
App.AirShooter: App<App.AirShooter.State>
  let img = VoxBox.alloc_capacity(65536*8)
  App.new<App.AirShooter.State>(
    App.AirShooter.init
    App.AirShooter.draw(img)
    App.AirShooter.when
    App.AirShooter.tick
    App.AirShooter.post
  )