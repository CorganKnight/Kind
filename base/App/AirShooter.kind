//  Criar inteligência artificial para o inimigo
//  A cada frame mover x distancias para baixo
//  App.AirShooter.when.enemy.move(enemy: App.AirShooter.Enemy, pos: App.AirShooter.Position): App.AirShooter.Position
//  new position
//
//  App.AirShooter.when.enemies.move(local: App.AirShooter.State.Local): App.AirShooter.State.Local
//    aplicar App.AirShooter.when.enemy.move a todos inimigos e atualizar sua posição na lista
//    let new_enemies = []
//      for enemy in enemies with new_enemies:
//        ?s
//
//  Criar o tipo projétil com projetil seu e do adversário (projétil do adversário guardando direção do tiro)
//  Criar inteligencia artificial para o projetil 
//
//  Converter cada unidade em uma hitbox: Tipo Shape
//  Adicionar no when um for para conferir se algum projétil está atingindo alguém (apenas conferir se acerta do time adversário do dono do projetil)
//    Checar colisões com a função Shape.collision
//  
//  Adicionar no tipo player informação de Cooldown no tiro
//  Adicionar no tipo local informação de se está atirando (shooting: Bool)
//  Adicionar no when para mudar local@shooting no mouse_down 
//  Adicionar no when para mudar local@shooting no mouse_up 
//  Adicionar no when para rodar App.AirShooter.when.player.shoot no frame
//  App.AirShooter.when.player.shoot(local: App.AirShooter.State.Local): App.AirShooter.State.Local
//    Conferir se o Cooldown do tiro está em 0, se sim, atirar
//    Se não, reduzir o cooldown em 1
//

//  npm i -g kind-lang-voxbox-maker
//  klvm Name.Space.Here [Z_index] [Z_scale]




// App states (local = clicks, global = visitors)
App.AirShooter.State: App.State
  App.State.new((App.AirShooter.State.Local), Unit)

type App.AirShooter.State.Local {
  new(
    player: App.AirShooter.Player
    enemies: List<App.AirShooter.Enemy>
    mouse_over: String 
    mouse_pos: Pair<U32, U32>
    bullets: List<App.AirShooter.Parts.Bullet>
  )
}

App.AirShooter.Ship.Constructor(pos: App.AirShooter.Position, vel: F64, sprite: VoxBox, hue: U32, isPlayer: Bool, cooldown: U32): App.AirShooter.Ship
  let defaultBullet = App.AirShooter.Parts.Bullet.new(App.AirShooter.Sprites.Bullet, isPlayer, {0, 0}, 10.0)
  let defaultWeapon = App.AirShooter.Parts.Weapon.new(defaultBullet, cooldown, cooldown)

  App.AirShooter.Ship.new(
    pos,
    App.AirShooter.Parts.Engine.new(vel),
    sprite,
    hue,
    defaultWeapon
  )

// Initial state
App.AirShooter.init: App.Init<App.AirShooter.State>
  let sprite = App.AirShooter.Sprites.Player_Ship
  let enemy_sprite = App.AirShooter.Sprites.Enemy_Ship

  let ship = App.AirShooter.Ship.Constructor({128.0, 100.0}, 2.5, sprite, 0, true, 7)

  let enemies = [
    App.AirShooter.Enemy.new(App.AirShooter.Ship.Constructor({025.0, 108.0}, 0.5, enemy_sprite, 60, false, 20)),
    App.AirShooter.Enemy.new(App.AirShooter.Ship.Constructor({230.0, 060.0}, 1, enemy_sprite, 120, false, 40)),
    App.AirShooter.Enemy.new(App.AirShooter.Ship.Constructor({125.0, 012.0}, 0.7, enemy_sprite, 200, false, 60))
  ]

  let player = App.AirShooter.Player.new(ship)
  let mouse_over = ""
  let mouse_pos  = {0, 0}
  let local = App.AirShooter.State.Local.new(player, enemies, mouse_over, mouse_pos, [])
  App.Store.new<App.AirShooter.State>(local, unit)

App.AirShooter.draw.canvas(local: App.AirShooter.State.Local, img: VoxBox): VoxBox
  let img = App.AirShooter.Ship.draw(local@player@ship, img)

  for enemy in local@enemies with img:
    App.AirShooter.Ship.draw(enemy@ship, img)

  for bullet in local@bullets with img:
    App.AirShooter.Parts.Bullet.draw(bullet, img)

  img
  

// Render function
App.AirShooter.draw(img: VoxBox): App.Draw<App.AirShooter.State>
  (state)
  let img = App.AirShooter.draw.canvas(state@local, img)
  <div style={
    "display": "flex"
    "justify-content": "center"
    "align-items": "center"
    "background-color": "#000000"
    }>
    {
      DOM.vbox(
        {
          "id": "game_screen",
          "width": "256",
          "height": "256",
          "scale": "4"
        }, {}, img)
    } 
  </div>

App.AirShooter.when.move(local: App.AirShooter.State.Local): App.AirShooter.State.Local
  let mouse_pos = local@mouse_pos
  let des = {U32.to_f64(mouse_pos@fst / 4), U32.to_f64(mouse_pos@snd / 4)}
  //TODO: Se o movimento for muito curto, não executar movimento nenhum, para ela não ficar tremendo
  let local = local@player@ship <- App.AirShooter.Ship.move(des, local@player@ship)
  local

App.AirShooter.frame.enemy(local: App.AirShooter.State.Local): App.AirShooter.State.Local
  let aux = {local@bullets, []}
  
  for enemy in local@enemies with aux:
    let pos = enemy@ship@position  
    let des = {pos@fst, 0.0}
    let enemy = enemy@ship@position <- if F64.gtn(pos@snd, 256) then {pos@fst, 12} else pos
    let enemy = enemy@ship <- App.AirShooter.Ship.move(des, enemy@ship)
  
    let bullet = App.AirShooter.Ship.shoot(enemy@ship)

    case bullet {
      some:
        let enemy = enemy@ship@weapon@last_fired <- 0
        {List.append!(aux@fst, bullet.value), List.append!(aux@snd, enemy)}
    } default { aux@fst, List.append!(aux@snd, enemy) }
  
  
  
  let local = local@bullets <- aux@fst
  let local = local@enemies <- aux@snd

  local

App.AirShooter.when.shoot(local: App.AirShooter.State.Local): App.AirShooter.State.Local
  let bullet = App.AirShooter.Ship.shoot(local@player@ship)
  case bullet {
    some: 
      let local = local@bullets <- List.append!(local@bullets, bullet.value)
      let local = local@player@ship@weapon@last_fired <- 0
      local
  } default local

App.AirShooter.frame.bullet(local: App.AirShooter.State.Local): App.AirShooter.State.Local
  let bullets = List.map!!(App.AirShooter.Parts.Bullet.move, local@bullets)

  let bullets = List.filter<App.AirShooter.Parts.Bullet>((bullet) F64.gtn(bullet@position@snd, 1.0), bullets)
  let bullets = List.filter<App.AirShooter.Parts.Bullet>((bullet) F64.ltn(bullet@position@snd, 256.0), bullets)

  let local = local@bullets <- bullets

  local



App.AirShooter.frame.cooldown(local: App.AirShooter.State.Local): App.AirShooter.State.Local
  let aux = (ship: App.AirShooter.Ship) 
    let weapon = ship@weapon
    case U32.ltn(ship@weapon@last_fired, ship@weapon@cooldown) {
      true: 
        let ship = ship@weapon@last_fired <- U32.inc(ship@weapon@last_fired)
        ship
    } default ship

  let f = (enemy: App.AirShooter.Enemy) 
    let enemy = enemy@ship <- aux(enemy@ship)
    enemy

  let local = local@enemies <- List.map!!(f, local@enemies)

  let local = local@player@ship <- aux(local@player@ship)

  local

// Event handler
App.AirShooter.when: App.When<App.AirShooter.State>
  (event, state)
  let local = state@local
  case event {
    mouse_down: 
      let local = App.AirShooter.when.shoot(local)
      App.set_local!(local)
    frame:
      let local = App.AirShooter.when.move(local)
      let local = App.AirShooter.frame.enemy(local)
      let local = App.AirShooter.frame.bullet(local)
      let local = App.AirShooter.frame.cooldown(local)
      App.set_local!(local)
    mouse_move:
      let local = 
        if local@mouse_over =? "game_screen" then 
          local@mouse_pos <- event.mouse_pos
        else
          local
      App.set_local!(local)
    mouse_over:
      let local = local@mouse_over <- event.id
      App.set_local!(local)

  } default App.pass!

// Global ticker: not used
App.AirShooter.tick: App.Tick<App.AirShooter.State>
  App.no_tick<App.AirShooter.State>

// Global visitor: counts posts to room_zero
App.AirShooter.post: App.Post<App.AirShooter.State>
  (time, room, addr, data, global_state)
  global_state

// A "AS, world!" + counter application
App.AirShooter: App<App.AirShooter.State>
  let img = VoxBox.alloc_capacity(65536*8)
  App.new<App.AirShooter.State>(
    App.AirShooter.init
    App.AirShooter.draw(img)
    App.AirShooter.when
    App.AirShooter.tick
    App.AirShooter.post
  )