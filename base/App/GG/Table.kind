type App.GG.Table {
  new(
    slots: List<App.GG.Table.Slot>
    selected: Maybe<Pair<U32, U32>>
  )
}

type App.GG.Table.Slot {
  new(
    chip: Maybe<App.GG.Chip>
  )
}

App.GG.Table.from_folder(countdown: Nat, folder: App.GG.Chips): List<App.GG.Table.Slot>
  if countdown =? 0 then
    List.nil<App.GG.Table.Slot>
  else
    case folder {
    nil: 
      List.cons<App.GG.Table.Slot>(
        App.GG.Table.Slot.new(none),
        App.GG.Table.from_folder(countdown -1, folder)
      )
    cons: 
      List.cons<App.GG.Table.Slot>(
        App.GG.Table.Slot.new(some(folder.head)),
        App.GG.Table.from_folder(countdown -1, folder.tail)
      )
  }

App.GG.Table.Slot.get_selected_index(
  table: App.GG.Table
): Maybe<U32>
  Maybe {
    get selected = table@selected
    let max_stack = App.GG.Constants.chips_array@snd
    let index = (selected@snd * max_stack) + selected@fst
    return index
  }