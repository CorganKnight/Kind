App.GG.Effect.creature.is_enemy(coord: App.GG.Coord): App.GG.Effect<Bool>
  (center, origin, local)
  let grid = local@grid
  let bool =
    Maybe {
      get creature = App.GG.Creature.get(coord, grid)
      get team  = App.GG.Team.get(center, origin, grid)
      let bool = App.GG.Team.eql(creature@team, team)
      return not(bool) 
    } <> false
  App.GG.Effect.Result.new!(bool, center, origin, local, (enemy, img) img, 0, "")



App.GG.Effect.creature.change_energy_at(val: I32, pos: App.GG.Coord): App.GG.Effect<I32>
  (center, origin, local)
  let grid = local@grid
  let {real_val, new_grid} = 
    Maybe { 
      get tile = App.GG.Grid.get(pos, grid)
      get creature = tile@creature
      let category = creature@category
      let {mod_monster, energy} = case category {
        minion: {category, +0#32}
        slime:
          let new_energy = I32.max(category.energy + val , 0)
          let max_energy = +100#32
          let real_energy = I32.min(new_energy, max_energy)
          let real_change = real_energy - category.energy
          {App.GG.Monster.slime(category.data, category.attributes, category.charge, category.hand, category.folder, real_energy), real_change}
      }
      let new_creature = creature@category <- mod_monster
      let new_tile = tile@creature <- some(new_creature)
      let new_grid = App.GG.Grid.set(pos, new_tile, grid)

      return {energy, new_grid}
    } <> {+0#32, grid}
    let new_local = local@grid <- new_grid
  App.GG.Effect.Result.new!(real_val, center, origin, new_local, (enemy, img) img, 0, "")

App.GG.Effect.creature.damage_with_attribute(dmg: I32): App.GG.Effect<I32>
  let pass = App.GG.Effect { return +0#32 }
  App.GG.Effect { 
    get creature = App.GG.Effect.creature.get
    get center = App.GG.Effect.coord.get_center
    without creature: pass
    let as = creature@statuses@attack_stance
    let extra_dmg = App.GG.Creature.Status.attack_stance.extra_dmg(as, dmg)
    let new_creature =  App.GG.Creature.Status.attack_stance.change_num
    let attributes = App.GG.Attributes.get(creature)
    without attributes: App.GG.Effect { return extra_dmg }
    App.GG.Effect { 
      let destruction = attributes@damage
      App.GG.Effect { 
        App.GG.Effect.creature.modify(new_creature)
        return (extra_dmg * destruction) / 25
      }
    }
  }

App.GG.Effect.creature.get: App.GG.Effect<Maybe<App.GG.Creature>>
  (center, origin, local)
  let creature = App.GG.Creature.get(center, local@grid)
  App.GG.Effect.Result.new!(creature, center, origin, local, (enemy, img) img, 0, "")

App.GG.Effect.creature.del_at(pos: App.GG.Coord): App.GG.Effect<Unit>
  (center, origin, local)
  let new_grid = App.GG.Creature.delete(pos, local@grid)
  let new_local = local@grid <- new_grid
  App.GG.Effect.Result.new!(unit, center, origin, new_local, (enemy, img) img, 0, "")

App.GG.Effect.creature.get_at(pos: App.GG.Coord): App.GG.Effect<Maybe<App.GG.Creature>>
  (center, origin, local)
  let creature = App.GG.Creature.get(pos, local@grid)
  App.GG.Effect.Result.new!(creature, center, origin, local, (enemy, img) img, 0, "")

App.GG.Effect.creature.modify(mod: App.GG.Creature -> App.GG.Creature): App.GG.Effect<Unit>
  (center, origin, local)
  let new_grid = App.GG.Creature.modify_at(mod, center, local@grid)
  let new_local = local@grid <- new_grid
  App.GG.Effect.Result.new!(unit, center, origin, new_local, (enemy, img) img, 0, "")

App.GG.Effect.creature.modify_at(mod: App.GG.Creature -> App.GG.Creature, pos: App.GG.Coord): App.GG.Effect<Unit>
  (center, origin, local)
  let new_grid = App.GG.Creature.modify_at(mod, pos, local@grid)
  let new_local = local@grid <- new_grid
  App.GG.Effect.Result.new!(unit, center, origin, new_local, (enemy, img) img, 0, "")

App.GG.Effect.creature.spawn_at(creature: App.GG.Creature, pos: App.GG.Coord): App.GG.Effect<Unit> 
  (center, origin, local)
  let new_grid = App.GG.Creature.place(creature, pos, local@grid)
  let new_local = local@grid <- new_grid
  App.GG.Effect.Result.new!(unit, center, origin, new_local, (enemy, img) img, 0, "")
