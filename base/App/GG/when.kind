App.GG.when: App.When<App.GG.State>
  (event, state)
  let local = state@local

  case local {
    lobby: App.GG.when.lobby(event, local.state)
    game:  App.GG.when.game(event, local.state)
  }

App.GG.when.lobby(
  event: App.Event,
  local: App.GG.Lobby
): IO<Maybe<App.State.local(App.GG.State)>>
  case event {
    init:
      App.GG.when.lobby.init(local)
    mouse_click:
      App.GG.when.lobby.mouse_click(local, event.id, U64.to_nat(event.time))
  } default App.pass!

App.GG.when.lobby.init(
  local: App.GG.Lobby
): IO<Maybe<App.State.local(App.GG.State)>>
  IO {
    get seed = IO.get_time
    let body = App.GG.Body.random(seed)
    let new_local = local@body <- some(body)
    let new_state = App.GG.State.local.lobby(new_local)
    App.set_local!(new_state)
  }

App.GG.when.lobby.mouse_click(
  local: App.GG.Lobby
  id: String
  time: Nat
): IO<Maybe<App.State.local<App.GG.State>>>
  switch String.starts_with(id) {
    "start-button":
      use body = local@body abort App.pass!
      let new_local = App.GG.init.game(body, time)
      App.set_local!(new_local)
    
    "randomize-":
      let part = String.drop(10, id)

      if part =? "all" then
        IO {
          get seed = IO.get_time
          let body = App.GG.Body.random(seed)
          let new_local = local@body <- some(body)
          let new_state = App.GG.State.local.lobby(new_local)
          App.set_local<App.GG.State>(new_state)
        }
      else
        use body = local@body abort App.pass!
        let {chips, fragment} = switch String.eql(part) {
          "Hull": 
            { App.GG.Parts.hull(body@hull@form), App.GG.Body.Fragment.hull }
          "Arm1": 
            { App.GG.Body.Arms.chips, App.GG.Body.Fragment.arm_1 }
          "Arm2": 
            { App.GG.Body.Arms.chips, App.GG.Body.Fragment.arm_2 } 
          "Upper Body": 
            { App.GG.Body.Upper.chips, App.GG.Body.Fragment.upper }
          "Lower Body": 
            { App.GG.Body.Lower.chips, App.GG.Body.Fragment.lower }
        } default { [], App.GG.Body.Fragment.hull }
        IO {
          get seed = IO.get_time
          let body = App.GG.Body.Fragment.random(seed, chips, fragment, body)
          let new_local = local@body <- some(body)
          let new_state = App.GG.State.local.lobby(new_local)
          App.set_local<App.GG.State>(new_state)
        }
  } default App.pass!

// Event handler
App.GG.when.game(
  event: App.Event,
  game: App.GG.Game
): IO<Maybe<App.State.local(App.GG.State)>>
  let phase = game@phase
  case event {
    // init: 
      // log(U64.show(event.time))
      // let grid = local@grid
      // let slime = App.GG.Slime.find(grid)
      // without slime: App.pass<App.GG.State>
      // let new_grid = App.GG.Creature.modify_at(App.GG.Creature.shuffle_folder(10000), slime@snd, grid) // U64.to_nat(event.time % 10000)
      // let new_local = local@grid <- new_grid
      // App.set_local<App.GG.State>(new_local)
    frame:
      let new_game = 
        case phase {
          setup:
            game
          game:
            let new_game = App.GG.when.update_grid(game)
            let new_phase = App.GG.when.update_phase(phase)
            new_game@phase <- new_phase
        }
      let new_game = new_game@random <- Nat.random(new_game@random)
      //log("time = " | U64.show(event.time))
      let new_local = App.GG.State.local.game(new_game)
      App.set_local<App.GG.State>(new_local)
      
    key_down:
      log("Key pressed: " |U16.show(event.code))
      case phase {
        setup:
          let table = phase.table
          switch U16.eql(event.code) {
            // Move arrow functions
              // Left Arrow
              37#16:  App.GG.when.move.chip_selection(game, App.GG.Arrow.left)
              // Up Arrow
              38#16:  App.GG.when.move.chip_selection(game, App.GG.Arrow.up)
              // Right Arrow
              39#16:  App.GG.when.move.chip_selection(game, App.GG.Arrow.right)
              // Down Arrow
              40#16:  App.GG.when.move.chip_selection(game, App.GG.Arrow.down)
            // Return
            13#16:  App.GG.when.setup_to_game(game)
            // Esc
            27#16:  App.GG.when.return_chip(game)
            // Spacebar
            32#16:  App.GG.when.select_chip.space(game)
          }default  App.pass<App.GG.State> 
        game: 
          switch U16.eql(event.code) {
            // Move character functions
              // Left Arrow
              37#16:  App.GG.when.move(game, App.GG.Arrow.left)
              // Up Arrow
              38#16:  App.GG.when.move(game, App.GG.Arrow.up)
              // Right Arrow
              39#16:  App.GG.when.move(game, App.GG.Arrow.right)
              // Down Arrow
              40#16:  App.GG.when.move(game, App.GG.Arrow.down)
            // X 
            88#16:
              let new_game = App.GG.when.start_charge(game)
              let new_local = App.GG.State.local.game(new_game)
              App.set_local<App.GG.State>(new_local)
            // Spacebar
            32#16: 
              let new_grid = App.GG.when.use_chip(game@grid)
              let new_game = game@grid <- new_grid
              let new_local = App.GG.State.local.game(new_game)
              App.set_local<App.GG.State>(new_local)
            // Return
            13#16: App.GG.when.game_to_setup(game)
          }default App.pass<App.GG.State> 
      }
    key_up:
      case phase {
        setup: App.pass<App.GG.State>
        game:
          switch U16.eql(event.code) {
            // X 
            88#16: 
              let new_grid = App.GG.when.basic_attack(game@grid)
              let new_game = game@grid <- new_grid
              let new_local = App.GG.State.local.game(new_game)
              App.set_local<App.GG.State>(new_local)
          }default App.pass<App.GG.State>
      }
    mouse_move:
      // log("x: " | U32.show(event.mouse_pos@fst) | "  y: " | U32.show(event.mouse_pos@snd))
      let new_game = game@mouse <- event.mouse_pos
      let new_local = App.GG.State.local.game(new_game)
      App.set_local<App.GG.State>(new_local)
    mouse_down:
      App.GG.when.click_element(game, game@mouse)      
  }default App.pass<App.GG.State>
  
// ============================================================================
// Transitions between game phases

App.GG.when.setup_to_game(local: App.GG.Game): IO<Maybe<App.State.local<App.GG.State>>>
  let grid = local@grid
  case local@phase as phase {
    setup: 
      let new_grid = Maybe {
        // Finds your character
        get pair = App.GG.Slime.find(grid)
        let {creature, coord} = pair
        get slime = 
          case creature@category as monster {
            minion: none
            slime: 
              let data = monster.data
              let attributes = monster.attributes
              let charge = monster.charge
              // If you have no chips in hand, stay with your last round's chips
              let hand = if List.is_empty!(phase.hand) then monster.hand else List.reverse!(phase.hand) 
              // Places all the remaining table chips back into the folder
              let fold = List.somes!(List.map!!((x: App.GG.Table.Slot) x@chip, phase.table@slots)) ++ monster.folder
              let enrg = phase.energy
              some(App.GG.Monster.slime(data, attributes, charge, hand, fold, enrg))
          }
        // Fills Slime's hand, folder and energy with the new values
        let new_grid = App.GG.Creature.modify_at((c: App.GG.Creature) c@category <- slime , coord, grid)
        return new_grid
      } <> grid
      // Game phase with 0 frames
      let new_phase = App.GG.Phase.game(0#64)
      let new_local = local@grid <- new_grid
      let new_local = new_local@phase <- new_phase
      let new_local = App.GG.State.local.game(new_local)
      App.set_local<App.GG.State>(new_local)
    game: App.pass<App.GG.State>
  }

App.GG.when.game_to_setup(local: App.GG.Game): IO<Maybe<App.State.local<App.GG.State>>>
  let grid = local@grid
  case local@phase as phase {
    setup: App.pass<App.GG.State>
    game:
      // If turn bar is full
      if U64.gte(phase.turn_bar, 1024) then
        // Finds your character
        let slime = App.GG.Slime.find(grid)
        without slime: App.pass<App.GG.State>
        let {creature, coord} = slime
        case creature@category as monster {
          minion: App.pass<App.GG.State>
          slime:
            // How many chips are displayed
            let table_size = 10
            // Subtracts x chips from the creature's folder
            let mod   = App.GG.Creature.sub_folder(table_size)
            // Places those chips on the table
            let slots = App.GG.Table.from_folder(table_size, monster.folder)
            let hand = [] :: App.GG.Chips
            // Adds to the monster's energy his energy obtained each round (obtained from DNA's attributes), maximum 100
            let energy = I32.min(monster.energy + monster.attributes@energy, 100)
            let phase = App.GG.Phase.setup({slots, none}, hand, energy)
            let new_grid  = App.GG.Creature.modify_at(mod, coord, grid)
            let new_local = local@phase <- phase
            let new_local = new_local@grid <- new_grid
            let new_local = App.GG.State.local.game(new_local)
            App.set_local<App.GG.State>(new_local)
        }
      else
        App.pass<App.GG.State>
  }

// ============================================================================
// Functions to get chips in setup phase

// when users press space
// get the selected chip 
App.GG.when.select_chip.space(
  local: App.GG.Game
): IO<Maybe<App.State.local<App.GG.State>>>
  open local
  case local.phase as phase {
    // only works if in setup phase
    setup:
      Maybe {
        let table = phase.table
        get selected_chip = table@selected
        let index = (selected_chip@snd * 5) + selected_chip@fst
        let index = U32.to_nat(index)
        // new_hand with the chip
        // new_table without the chip
        let new_local = local@phase <- App.GG.when.get_chip(index, phase)
        
        let new_local = App.GG.State.local.game(new_local)return 
        App.set_local<App.GG.State>(new_local)
      } <> App.pass<App.GG.State>
  } default App.pass<App.GG.State>

// when user press the arrows buttons
// move the chip selection
App.GG.when.move.chip_selection(
  local: App.GG.Game 
  arrow: App.GG.Arrow
): IO<Maybe<App.State.local<App.GG.State>>>
  open local
  case local.phase as phase {
    // only work in setup phase
    setup:
      let table = phase.table
      let new_table = case table@selected as selected {
        none:
          // case no chip was selected before
          // initialize in 0,0 
          table@selected <- some({0, 0})
        some:
          let selected  = selected.value
          // moving
          let new_value = case arrow {
            up:    selected@fst <- selected@fst - 1
            down:  selected@fst <- selected@fst + 1
            left:  selected@snd <- selected@snd - 1
            right: selected@snd <- selected@snd + 1
          }
          // checking bounds
          let new_value = {U32.mod(new_value@fst, 5), U32.mod(new_value@snd, 2)}
          table@selected <- some(new_value)
      }
      let new_local = local@phase <- App.GG.Phase.setup(new_table, phase.hand, phase.energy)
      let new_local = App.GG.State.local.game(new_local)
      App.set_local!(new_local)
  } default App.pass!


// function used to get a chip
// puts the chip on hand
// removes the chip from table
App.GG.when.get_chip(
  index: Nat // index of 'removed' slot
  phase: App.GG.Phase
): App.GG.Phase
  case phase {
    setup:
      let table  = phase.table
      let hand   = phase.hand
      let energy = phase.energy
      Maybe {
        // Gets the chip of the index
        get item = table@slots[index]
        get chip = item@chip
        // Gets the energy cost based on chip's energy cost and maybe on having different classes than the already picked chips
        get energy_cost = App.GG.when.get_energy_cost(chip, phase)
        let new_energy = phase.energy - energy_cost
        let new_item   = item@chip <- none
        // Removes that chip from the table
        let new_table  = table@slots[index] <- new_item
        let new_hand   = chip & hand
        let new_phase  = App.GG.Phase.setup(new_table, new_hand, new_energy)
        return new_phase
      } <> phase
    game:
      phase
  }

App.GG.when.get_energy_cost(chip: App.GG.Chip, phase: App.GG.Phase): Maybe<I32>
  case phase {
    setup:
      // gets if the chip demands extra energy based on already picked chips
      let energy_cost_extra = App.GG.when.get_energy_cost.extra(chip, phase.hand)
      let energy_cost = chip@energy + energy_cost_extra
      if energy_cost >? phase.energy then
        none
      else
        some(energy_cost)
    game: none 
  }

// If you are not picking your first chip, and there are no currently
// picked chips from your class, adds 10 to the energy cost for
// each already class already picked.
App.GG.when.get_energy_cost.extra(chip: App.GG.Chip, hand: App.GG.Chips): I32
  let main_class = chip@class
  let energy = 0 :: I32
  // checks if the analized chip has the same class as the selected chip
  let same_class  = (chip: App.GG.Chip) App.GG.Class.eql(main_class, chip@class)
  // checks if the chip have a different class than the selected chip's class
  let diff_class = (class: App.GG.Class, chip: App.GG.Chip)
    if App.GG.Class.eql(class, main_class) then
      false
    else
      App.GG.Class.eql(class, chip@class)
  // searches for a chip with the same class as selected's chip
  let has_class = List.find!(same_class, hand)
  // if there hasn't a chip from that class
  case has_class {
    none:
      // Checks how many classes are already selected, and add 10 to the energy cost for each.
      for class in [App.GG.Class.strength, App.GG.Class.destruction, App.GG.Class.power, App.GG.Class.control] with energy:
        if Maybe.is_some!(List.find!(diff_class(class), hand)) then 
          energy + 10
        else
          energy
      energy
    some:
      energy
  }

// Returns the last selected chip onto the table
App.GG.when.return_chip(local: App.GG.Game): IO<Maybe<App.State.local<App.GG.State>>>
  let new_phase = App.GG.when.return_chip.phase(local@phase)
  let new_local = local@phase <- new_phase
  let new_local = App.GG.State.local.game(new_local)
  App.set_local<App.GG.State>(new_local)

// function used to return a chip
// puts the chip on table
// removes the chip from hand
App.GG.when.return_chip.phase(
  phase: App.GG.Phase
): App.GG.Phase
  case phase {
    setup:
      let hand  = phase.hand
      let table = phase.table
      case hand {
        nil: phase
        cons:
          let chip = hand.head
          // returns the table with the chip on it
          let slots = App.GG.when.return_chip.go(chip, table@slots)
          // gets how much energy was wasted
          let energy_cost_extra = App.GG.when.get_energy_cost.extra(chip, hand.tail)
          // recovers wasted energy
          let energy_cost = chip@energy + energy_cost_extra
          let new_energy = energy_cost + phase.energy
          let new_table = table@slots <- slots
          let new_hand = hand.tail
          let new_phase = App.GG.Phase.setup(new_table, new_hand, new_energy)
          new_phase
      }
    game:
      phase
  }
  
// Adds the selected chip to the first available slot in the table
App.GG.when.return_chip.go(chip: App.GG.Chip, slots: List<App.GG.Table.Slot>): List<App.GG.Table.Slot>
  case slots {
    nil: []
    cons: 
      let table_chip = slots.head@chip
      without table_chip: App.GG.Table.Slot.new(some(chip)) & slots.tail
      slots.head & App.GG.when.return_chip.go(chip, slots.tail)
  }

// ============================================================================
// Functions to get chip from mouse

// Gets chip with mouse based on mouse's position
App.GG.when.click_element(local: App.GG.Game, mouse: Pair<U32, U32>): IO<Maybe<App.State.local<App.GG.State>>>
  let phase = local@phase
  case phase {
    setup:
      // Gets mouse's location divide by the game's scale
      let {x, y} = {mouse@fst / 2, mouse@snd / 2}
      let point = V2.new(U32.to_f64(x), U32.to_f64(y))
      switch Shape.Point.collision.rectangle(point) {
        // Rectangle representing table
        App.GG.when.table:
          // Subtracts the x corresponding to the space before the table
          let x = x - ((App.GG.Constants.chips_starting_position@fst + 160) - (App.GG.Constants.chip_size@fst/2))
          // Subtracts the y corresponding to the space before the table
          let y = y - ((App.GG.Constants.chips_starting_position@snd + 262) - (App.GG.Constants.chip_size@snd/2))
          Maybe {
            // Gets the Chip's index on the table
            get index = App.GG.when.chip({x, y})
            // Places the chip in your hand if able
            let updated_phase = App.GG.when.get_chip(index, phase)
            let new_local = local@phase <- updated_phase
            let new_local = App.GG.State.local.game(new_local)return 
            App.set_local<App.GG.State>(new_local)
          } <> App.pass<App.GG.State>
      }default App.pass<App.GG.State>
    game: App.pass<App.GG.State>
  }

// Rectangle of the table in setup phase
App.GG.when.table: Shape.Rectangle
  // gets the top left position of the rectangle
  let {x1, y1} = {((App.GG.Constants.chips_starting_position@fst + 160) - (App.GG.Constants.chip_size@fst/2)) ((App.GG.Constants.chips_starting_position@snd + 262) - (App.GG.Constants.chip_size@snd/2))}
  let {vx, vy} = App.GG.Constants.chips_space_between
  let {cx, cy} = App.GG.Constants.chip_size
  // gets how many items are in each row and column
  let {r,  c } = App.GG.Constants.chips_array
  // gets the bottom right position of the rectangle
  let {x2, y2} = {x1 + ((cx + vx) * r), y1 + ((cy + vy) * c)}
  log(U32.show(x1) | " " | U32.show(x2) | " " | U32.show(y1) | " " | U32.show(y2))
  Shape.Rectangle.new(U32.to_f64(x1), U32.to_f64(x2), U32.to_f64(y1), U32.to_f64(y2))

// Gets the index of the hover chip
App.GG.when.chip(mouse_pos: Pair<U32, U32>): Maybe<Nat>
  // gets how many items are in each row and column
  let {r,   c  } = App.GG.Constants.chips_array
  let {x,   y  } = mouse_pos
  let {v_x, v_y} = App.GG.Constants.chips_space_between
  let {c_x, c_y} = App.GG.Constants.chip_size
  // total chip size = chip size + space between chips
  let {t_x, t_y} = {c_x + v_x, c_y + v_y}
  // x and y positions on the hovered chip size + spacebetween chips area
  let {s_x, s_y} = {x % t_x, y % t_y}
  let row        = x / t_x
  let column     = y / t_y
  // if mouse is not positioned over a gap between objects, return the row and index of the hovered chip
  if ((x % (c_x + v_x)) <? c_x) && ((y % (c_y + v_y)) <? c_y) then 
    some(U32.to_nat(column + (row * c)))
  else
    none

// ============================================================================
// Game phase functions

// Moves the character to a direction
App.GG.when.move(local: App.GG.Game, arrow: App.GG.Arrow): IO<Maybe<App.State.local<App.GG.State>>>
  let grid            = local@grid
  // Finds your character
  let slime_coord     = App.GG.Slime.find(grid)
  without slime_coord : App.pass<App.GG.State>
  let {slime, coord}  = slime_coord
  // Gets the movement action to be added in the creature
  let move_action     = App.GG.Actions.movement(arrow)
  // Adds the movement action to the creature
  let mod_creature    = App.GG.Actions.add(move_action)
  let new_grid        = App.GG.Creature.modify_at(mod_creature, coord, grid)
  let new_local       = local@grid <- new_grid
  let new_local = App.GG.State.local.game(new_local)
  App.set_local<App.GG.State>(new_local)

// Updates turn bar 
App.GG.when.update_phase(phase: App.GG.Phase): App.GG.Phase
  case phase {
    setup: phase
    game: App.GG.Phase.game(phase.turn_bar + 2)
  }

// changes all tiles's has_acted field to false
// updates all tiles that has has_acted as false
// This must be done as there are projectiles or creatures that will move
// during a frame, and these should not run twice.
App.GG.when.update_grid(local: App.GG.Game): App.GG.Game
  for coord:tile in local@grid with local:
    App.GG.when.update_tile.has_acted(coord, local)
  for coord:tile in local@grid with local:
    App.GG.when.update_tile.run(coord, local)
  local

App.GG.when.update_tile.has_acted(coord: App.GG.Coord, local: App.GG.Game): App.GG.Game
  let grid = local@grid
  // Resets Creature's has_acted 
  let new_grid = App.GG.Creature.reset_actions(coord, grid)
  // Resets Projectile's has_acted
  let new_grid = App.GG.Projectile.reset_actions(coord, new_grid)
  let new_local = local@grid <- new_grid 
  new_local

App.GG.when.update_tile.run(coord: App.GG.Coord, local: App.GG.Game): App.GG.Game
  // If Creature hasn't acted yet, update its animation frame, runs its action's Effect and if there isn't a current action, moves next action to current.
  let new_local = App.GG.Creature.run(coord, local)
  // If Projectile hasn't acted yet, run its action's effect and update the projectile's frame
  let new_local = App.GG.Projectile.run(coord, new_local)
  // Runs the tile statuses
  let new_local = App.GG.Tile.Status.update_grid(coord, new_local)
  // Runs Creature's Status
  let new_local = App.GG.Creature.Status.update_grid(coord, new_local)
  new_local

// Starts charging if the creature isn't charging yet
App.GG.when.start_charge(local: App.GG.Game): App.GG.Game
  let grid = local@grid
  let new_grid = 
    Maybe {
      // Finds your character
      get pair = App.GG.Slime.find(grid)
      let {creature, coord} = pair
      get slime = 
        case creature@category as monster {
          minion: none
          slime:
            if Maybe.is_none!(monster.charge) then 
              some(App.GG.Monster.slime(monster.data, monster.attributes, some(0), monster.hand, monster.folder, monster.energy))
            else
              none
        }
      let mod = (creature) creature@category <- slime
      let new_grid = App.GG.Creature.modify_at(mod, coord, grid)
      return new_grid
    } <> grid
  let new_local = local@grid <- new_grid
  new_local

// Adds the basic Attack action to the creature's next action
App.GG.when.basic_attack(grid: App.GG.Grid): App.GG.Grid
  // Finds your character
  let pair = App.GG.Slime.find(grid)
  case pair {
    none: grid
    some:
      let {creature, coord} = pair.value
      case creature@category as monster {
        minion: grid
        slime:
          //let data = App.GG.Body.Hull.Form.data(monster.data@body@hull@form)
          //let charge = if Maybe.if!(U64.eql(960), monster.charge) then data@charge else App.GG.Effect.basic_attack
          let charged_attack = monster.charge <> 0#64
          let update_charges = 
            if charged_attack <? 320 then
              log("caiu aqui") 
              App.GG.Creature.Status.enhance_attack.update_charge(creature, coord, grid)
            else
              grid

          let effect = App.GG.Effect.basic_attack(charged_attack)
          let action = App.GG.Actions.basic_attack(effect)
          App.GG.Creature.modify_at(App.GG.Actions.add(action), coord, update_charges)
      }
  }

// Use the first chip in your hand
App.GG.when.use_chip(grid: App.GG.Grid): App.GG.Grid
  // finds your character
  let pair = App.GG.Slime.find(grid)
  case pair {
    none: grid
    some:
      let {creature, coord} = pair.value
      case creature@category as category {
        minion: grid
        slime:
          case category.hand {
            nil: grid
            cons: 
              // creates an action with the used chip's action
              let action = App.GG.Actions.Data.new(0, category.hand.head@effect, App.GG.Actions.Category.chip)
              App.GG.Creature.modify_at(App.GG.Actions.add(action), coord, grid)
          }
      }
  }


