type List.get_randoms.Result <A: Type> {
  new(
    seed: Nat
    generator: Random.Nat
    list: List<A>
    result: List<A>
  )
}

List.get_randoms<A: Type>(seed: Nat, generator: Random.Nat, count: Nat, list: List<A>, repetitions: Bool): List.get_randoms.Result<A>
  List.get_randoms.go<A>(count, List.get_randoms.Result.new<A>(seed, generator, list, []), repetitions)

List.get_randoms.go<A: Type>(count: Nat, state: List.get_randoms.Result<A>, repetitions: Bool): List.get_randoms.Result<A>
  open state
  let length = List.length!(state.list)
  case count length {
    succ succ:
      let seed   = state.generator(state.seed)
      let index  = seed % length
      let got    = state.list[index]
      let result = case got { none: state.result, some: got.value & state.result }
      let list   = 
        if repetitions then
          state.list
        else
          List.delete_at<A>(index, state.list)
      List.get_randoms.go<A>(count.pred, List.get_randoms.Result.new<A>(seed, state.generator, list, result), repetitions)
  } default state
