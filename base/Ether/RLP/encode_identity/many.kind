Ether.RLP.encode_identity.many(
  rlps: List<Ether.RLP>
  H: Equal<Bool>(Nat.lte(List.length(U8, Ether.RLP.encode.many(rlps)), Ether.RLP.max), true)
): Ether.RLP.decode.many(Ether.RLP.encode.many(rlps)) == rlps
  let bound = Ether.RLP.bound_encoding(rlps, Ether.RLP.max, H)
  case rlps with bound {
    nil: 
      refl
    cons:
      bound(
        () Ether.RLP.decode.many(Ether.RLP.encode.many(List.cons(Ether.RLP,rlps.head,rlps.tail))) == List.cons(Ether.RLP,rlps.head,rlps.tail)
        (bound.fst, bound.snd)
        bound.snd(
          () Ether.RLP.decode.many(Ether.RLP.encode.many(List.cons(Ether.RLP,rlps.head,rlps.tail))) == List.cons(Ether.RLP,rlps.head,rlps.tail)
          (bound.snd.fst, bound.snd.snd)
          case rlps.head with bound.snd.fst bound.snd.snd {
            data:
              let conditions = Bool.and.split(Nat.eql(List.length!(rlps.head.value),1), Nat.lte(U8.to_nat((List.head_with_default!(0#8,rlps.head.value))), 127))
              def condition = Bool.and(Nat.eql(List.length!(rlps.head.value),1), Nat.lte(U8.to_nat((List.head_with_default!(0#8,rlps.head.value))), 127))
              case condition with conditions {
                true:
                  case rlps.head.value with conditions {
                    cons:
                      case rlps.head.value.tail with conditions {
                        nil:
                          open conditions
                          let conditions.snd = mirror(conditions.snd)
                          case conditions.snd {
                            refl:
                              // data([rlps.head.value.head]) & Ether.RLP.decode.many(Ether.RLP.encode.many(rlps.tail)) == data([rlps.head.value.head]) & rlps.tail
                              open bound.snd.snd as bound_tail
                              let ind = Ether.RLP.encode_identity.many(rlps.tail, bound_tail.fst)
                              apply(List.cons(Ether.RLP, Ether.RLP.data([rlps.head.value.head])), ind)
                          }: conditions.snd.b( () List(Ether.RLP),List.cons(Ether.RLP,Ether.RLP.data(List.cons(U8,rlps.head.value.head,List.nil(U8))),Ether.RLP.decode.many(List.concat(U8,List.nil(U8),Ether.RLP.encode.many(rlps.tail)))),Nat.lte(U8.to_nat(rlps.head.value.head),191,() List(Ether.RLP),Ether.RLP.split.length(128,List.cons(U8,rlps.head.value.head,List.concat(U8,List.nil(U8),Ether.RLP.encode.many(rlps.tail))),() List(Ether.RLP),(head) (tail) List.cons(Ether.RLP,Ether.RLP.data(head),Ether.RLP.decode.many(tail))),Ether.RLP.split.length(192,List.cons(U8,rlps.head.value.head,List.concat(U8,List.nil(U8),Ether.RLP.encode.many(rlps.tail))),() List(Ether.RLP),(head) (tail) List.cons(Ether.RLP,Ether.RLP.node(Ether.RLP.decode.many(head)),Ether.RLP.decode.many(tail))))) == List.cons(Ether.RLP,Ether.RLP.data(List.cons(U8,rlps.head.value.head,List.nil(U8))),rlps.tail)
    
                        cons:
                          open conditions
                          Empty.absurd!(Bool.false_neq_true(conditions.fst))
                      }! :: Ether.RLP.decode.many(List.concat(U8,List.cons(U8,rlps.head.value.head,rlps.head.value.tail),Ether.RLP.encode.many(rlps.tail))) == List.cons(Ether.RLP,Ether.RLP.data(List.cons(U8,rlps.head.value.head,rlps.head.value.tail)),rlps.tail)
//                      //?true-278
                    nil:
                      open conditions
                      Empty.absurd!(Bool.false_neq_true(conditions.fst))
                  }!
                false:
                  //?false-278-10-2370-152742
                  let size_limit = Equal.refl(Bool, Nat.lte(List.length(U8,rlps.head.value),55))
                  case Nat.lte(List.length(U8,rlps.head.value),55)
                    with size_limit: Equal(Bool, Nat.lte(List.length(U8,rlps.head.value),55), self) {
                    true:
                      let recover_prefix = Nat.to_u8.safe_conversion(Nat.add(128,List.length(U8,rlps.head.value))
                        Nat.lte.slack_left(List.length(U8,rlps.head.value), 55, 72, size_limit))
                      case recover_prefix {
                        refl:
                          let limit_size = mirror(Nat.lte.slack_left(List.length(U8,rlps.head.value),55, 8, size_limit))
                          case limit_size {
                            refl:
                              let split_id = Ether.RLP.aux.split.0(rlps.head.value, Ether.RLP.encode.many(rlps.tail), size_limit)
                              case split_id {
                                refl:
                                  open bound.snd.snd as bound_tail
                                  let ind = Ether.RLP.encode_identity.many(rlps.tail, bound_tail.fst)
                                  apply(List.cons(Ether.RLP,Ether.RLP.data(rlps.head.value)), ind)
                              }: split_id.b(() List(Ether.RLP),(head) (tail) List.cons(Ether.RLP,Ether.RLP.data(head),Ether.RLP.decode.many(tail))) == List.cons(Ether.RLP,Ether.RLP.data(rlps.head.value),rlps.tail)
                          }: limit_size.b(() List(Ether.RLP),Ether.RLP.split.length(128,List.concat(U8,List.concat(U8,List.cons(U8,Nat.to_u8(Nat.add(128,List.length(U8,rlps.head.value))),List.nil(U8)),rlps.head.value),Ether.RLP.encode.many(rlps.tail)),() List(Ether.RLP),(head) (tail) List.cons(Ether.RLP,Ether.RLP.data(head),Ether.RLP.decode.many(tail))),Ether.RLP.split.length(192,List.concat(U8,List.concat(U8,Ether.RLP.encode.length(128,List.length(U8,rlps.head.value)),rlps.head.value),Ether.RLP.encode.many(rlps.tail)),() List(Ether.RLP),(head) (tail) List.cons(Ether.RLP,Ether.RLP.node(Ether.RLP.decode.many(head)),Ether.RLP.decode.many(tail)))) == List.cons(Ether.RLP,Ether.RLP.data(rlps.head.value),rlps.tail)
    
                      }: Nat.lte(    recover_prefix.b    ,127,() List(Ether.RLP),List.cons(Ether.RLP,Ether.RLP.data(List.cons(U8,Nat.to_u8(Nat.add(128,List.length(U8,rlps.head.value))),List.nil(U8))),Ether.RLP.decode.many(List.concat(U8,List.concat(U8,List.nil(U8),rlps.head.value),Ether.RLP.encode.many(rlps.tail)))),Nat.lte(    recover_prefix.b   ,191,() List(Ether.RLP),Ether.RLP.split.length(128,List.concat(U8,List.concat(U8,List.cons(U8,Nat.to_u8(Nat.add(128,List.length(U8,rlps.head.value))),List.nil(U8)),rlps.head.value),Ether.RLP.encode.many(rlps.tail)),() List(Ether.RLP),(head) (tail) List.cons(Ether.RLP,Ether.RLP.data(head),Ether.RLP.decode.many(tail))),Ether.RLP.split.length(192,List.concat(U8,List.concat(U8,Ether.RLP.encode.length(128,List.length(U8,rlps.head.value)),rlps.head.value),Ether.RLP.encode.many(rlps.tail)),() List(Ether.RLP),(head) (tail) List.cons(Ether.RLP,Ether.RLP.node(Ether.RLP.decode.many(head)),Ether.RLP.decode.many(tail))))) == List.cons(Ether.RLP,Ether.RLP.data(rlps.head.value),rlps.tail)
    
//                      ?true-4418-1090-258-258
                    false:
                      // proof that conversion is safe:
                      // - bound.snd.fst: len(rlps.head.value) < 256^8
                      // len(Bytes.from_nat(len(rlps.head.value))) <= 8
                      // sub(len(Bytes.from_nat(len(rlps.head.value))),1) <= 7
                      // add(56,128,sub(len(from_nat(len(rlps.head.value))),1)) <= 255
                      let limit_size_length = Ether.RLP.aux.bytes_from_nat(List.length(U8,rlps.head.value), bound.snd.fst)
                      let limit_size_length = Nat.lte.sub_both(List.length(U8,Bytes.from_nat(List.length(U8,rlps.head.value))),8,1, limit_size_length)
                      let recover_prefix = Nat.to_u8.safe_conversion(Nat.add(56,Nat.add(128,Nat.sub(List.length(U8,Bytes.from_nat(List.length(U8,rlps.head.value))), 1)))
                        Nat.lte.slack_left(Nat.sub(List.length(U8,Bytes.from_nat(List.length(U8,rlps.head.value))), 1), 7, 64, limit_size_length)
                      )
                      case recover_prefix {
                        refl:
                          let limit_length = mirror(limit_size_length)
                          case limit_length {
                            refl:
                              let recover_split = Ether.RLP.aux.split.1(rlps.head.value, Ether.RLP.encode.many(rlps.tail), size_limit, bound.snd.fst)
                              case recover_split {
                                refl:
                                  open bound.snd.snd as bound_tail
                                  let ind = Ether.RLP.encode_identity.many(rlps.tail, bound_tail.fst)
                                  apply(List.cons(Ether.RLP,Ether.RLP.data(rlps.head.value)), ind)
                              }: Equal(List(Ether.RLP), recover_split.b(() List(Ether.RLP),(head) (tail) List.cons(Ether.RLP,Ether.RLP.data(head),Ether.RLP.decode.many(tail))), List.cons(Ether.RLP,Ether.RLP.data(rlps.head.value),rlps.tail))
                          }: Equal(List(Ether.RLP), limit_length.b(() List(Ether.RLP),Ether.RLP.split.length(128,List.concat(U8,List.concat(U8,List.cons(U8,Nat.to_u8(Nat.add(56,Nat.add(128,Nat.sub(List.length(U8,Bytes.from_nat(List.length(U8,rlps.head.value))),1)))),Bytes.from_nat(List.length(U8,rlps.head.value))),rlps.head.value),Ether.RLP.encode.many(rlps.tail)),() List(Ether.RLP),(head) (tail) List.cons(Ether.RLP,Ether.RLP.data(head),Ether.RLP.decode.many(tail))),Ether.RLP.split.length(192,List.concat(U8,List.concat(U8,Ether.RLP.encode.length(128,List.length(U8,rlps.head.value)),rlps.head.value),Ether.RLP.encode.many(rlps.tail)),() List(Ether.RLP),(head) (tail) List.cons(Ether.RLP,Ether.RLP.node(Ether.RLP.decode.many(head)),Ether.RLP.decode.many(tail)))), List.cons(Ether.RLP,Ether.RLP.data(rlps.head.value),rlps.tail))
                      }: Equal(List(Ether.RLP), Nat.lte(    recover_prefix.b,    127,() List(Ether.RLP),List.cons(Ether.RLP,Ether.RLP.data(List.cons(U8,Nat.to_u8(Nat.add(56,Nat.add(128,Nat.sub(List.length(U8,Bytes.from_nat(List.length(U8,rlps.head.value))),1)))),List.nil(U8))),Ether.RLP.decode.many(List.concat(U8,List.concat(U8,Bytes.from_nat(List.length(U8,rlps.head.value)),rlps.head.value),Ether.RLP.encode.many(rlps.tail)))),Nat.lte(    recover_prefix.b,    191,() List(Ether.RLP),Ether.RLP.split.length(128,List.concat(U8,List.concat(U8,List.cons(U8,Nat.to_u8(Nat.add(56,Nat.add(128,Nat.sub(List.length(U8,Bytes.from_nat(List.length(U8,rlps.head.value))),1)))),Bytes.from_nat(List.length(U8,rlps.head.value))),rlps.head.value),Ether.RLP.encode.many(rlps.tail)),() List(Ether.RLP),(head) (tail) List.cons(Ether.RLP,Ether.RLP.data(head),Ether.RLP.decode.many(tail))),Ether.RLP.split.length(192,List.concat(U8,List.concat(U8,Ether.RLP.encode.length(128,List.length(U8,rlps.head.value)),rlps.head.value),Ether.RLP.encode.many(rlps.tail)),() List(Ether.RLP),(head) (tail) List.cons(Ether.RLP,Ether.RLP.node(Ether.RLP.decode.many(head)),Ether.RLP.decode.many(tail))))), List.cons(Ether.RLP,Ether.RLP.data(rlps.head.value),rlps.tail))
                      //?false-4418-1090-258-258
    
                  }: List.concat(U8,List.concat(U8,    self(    () Bytes,List.cons(U8,Nat.to_u8(Nat.add(128,List.length(U8,rlps.head.value))),List.nil(U8)),List.cons(U8,Nat.to_u8(Nat.add(56,Nat.add(128,Nat.sub(List.length(U8,Bytes.from_nat(List.length(U8,rlps.head.value))),1)))),Bytes.from_nat(List.length(U8,rlps.head.value)))),rlps.head.value),Ether.RLP.encode.many(rlps.tail),(bytes) List(Ether.RLP),List.nil(Ether.RLP),(bytes.head) (bytes.tail) Nat.lte(U8.to_nat(bytes.head),127,() List(Ether.RLP),List.cons(Ether.RLP,Ether.RLP.data(List.cons(U8,bytes.head,List.nil(U8))),Ether.RLP.decode.many(bytes.tail)),Nat.lte(U8.to_nat(bytes.head),191,() List(Ether.RLP),Ether.RLP.split.length(128,List.concat(U8,List.concat(U8,    self(    () Bytes,List.cons(U8,Nat.to_u8(Nat.add(128,List.length(U8,rlps.head.value))),List.nil(U8)),List.cons(U8,Nat.to_u8(Nat.add(56,Nat.add(128,Nat.sub(List.length(U8,Bytes.from_nat(List.length(U8,rlps.head.value))),1)))),Bytes.from_nat(List.length(U8,rlps.head.value)))),rlps.head.value),Ether.RLP.encode.many(rlps.tail)),() List(Ether.RLP),(head) (tail) List.cons(Ether.RLP,Ether.RLP.data(head),Ether.RLP.decode.many(tail))),Ether.RLP.split.length(192,List.concat(U8,List.concat(U8,Ether.RLP.encode.length(128,List.length(U8,rlps.head.value)),rlps.head.value),Ether.RLP.encode.many(rlps.tail)),() List(Ether.RLP),(head) (tail) List.cons(Ether.RLP,Ether.RLP.node(Ether.RLP.decode.many(head)),Ether.RLP.decode.many(tail)))))) == List.cons(Ether.RLP,Ether.RLP.data(rlps.head.value),rlps.tail)
    
              }! :: Ether.RLP.decode.many(List.concat(U8,   condition(    () List(U8),rlps.head.value,List.concat(U8,Ether.RLP.encode.length(128,List.length(U8,rlps.head.value)),rlps.head.value)),Ether.RLP.encode.many(rlps.tail))) == List.cons(Ether.RLP,Ether.RLP.data(rlps.head.value),rlps.tail)
            node:
              open bound.snd.fst as bound_child
              let ind = Ether.RLP.encode_identity.many(rlps.head.child, bound_child.fst)
              let remember_condition = Equal.refl(Bool, Nat.lte(List.length(U8,Ether.RLP.encode.many(rlps.head.child)), 55))
              //?hole-22-86-598
              case Nat.lte(List.length(U8,Ether.RLP.encode.many(rlps.head.child)), 55) with remember_condition: Nat.lte(List.length(U8,Ether.RLP.encode.many(rlps.head.child)), 55) == self {
                true:
                  let recover_prefix = Nat.to_u8.safe_conversion(
                    Nat.add(192,List.length(U8,Ether.RLP.encode.many(rlps.head.child))), Nat.lte.slack_left(List.length(U8,Ether.RLP.encode.many(rlps.head.child)), 55, 8, remember_condition)
                  )
                  case recover_prefix {
                    refl:
                      let lemma = Ether.RLP.aux.split.2(Ether.RLP.encode.many(rlps.head.child), Ether.RLP.encode.many(rlps.tail), remember_condition)
                      case lemma {
                        refl:
                          open bound.snd.snd as bound_tail
                          let ind_right = Ether.RLP.encode_identity.many(rlps.tail, bound_tail.fst)
                          let ind_left  = apply(Ether.RLP.node, Ether.RLP.encode_identity.many(rlps.head.child, bound_child.fst))
                          Equal.vapply(2)!!!!(ind_right)!!!(ind_left, List.cons(Ether.RLP))
                      }: lemma.b(() List(Ether.RLP),(head) (tail) List.cons(Ether.RLP,Ether.RLP.node(Ether.RLP.decode.many(head)),Ether.RLP.decode.many(tail))) == _

                  }: Nat.lte(    recover_prefix.b    ,127,() List(Ether.RLP),List.cons(Ether.RLP,Ether.RLP.data(List.cons(U8,Nat.to_u8(Nat.add(192,List.length(U8,Ether.RLP.encode.many(rlps.head.child)))),List.nil(U8))),Ether.RLP.decode.many(List.concat(U8,List.concat(U8,List.nil(U8),Ether.RLP.encode.many(rlps.head.child)),Ether.RLP.encode.many(rlps.tail)))),Nat.lte(    recover_prefix.b    ,191,() List(Ether.RLP),Ether.RLP.split.length(128,List.cons(U8,Nat.to_u8(Nat.add(192,List.length(U8,Ether.RLP.encode.many(rlps.head.child)))),List.concat(U8,List.concat(U8,List.nil(U8),Ether.RLP.encode.many(rlps.head.child)),Ether.RLP.encode.many(rlps.tail))),() List(Ether.RLP),(head) (tail) List.cons(Ether.RLP,Ether.RLP.data(head),Ether.RLP.decode.many(tail))),Ether.RLP.split.length(192,List.cons(U8,Nat.to_u8(Nat.add(192,List.length(U8,Ether.RLP.encode.many(rlps.head.child)))),List.concat(U8,List.concat(U8,List.nil(U8),Ether.RLP.encode.many(rlps.head.child)),Ether.RLP.encode.many(rlps.tail))),() List(Ether.RLP),(head) (tail) List.cons(Ether.RLP,Ether.RLP.node(Ether.RLP.decode.many(head)),Ether.RLP.decode.many(tail))))) == List.cons(Ether.RLP,Ether.RLP.node(rlps.head.child),rlps.tail)

                false:
                  let bound_bytes_from_nat = Ether.RLP.aux.bytes_from_nat(List.length(U8,Ether.RLP.encode.many(rlps.head.child)), bound_child.fst)
                  let limit_size_length = Ether.RLP.aux.bytes_from_nat(List.length(U8,Ether.RLP.encode.many(rlps.head.child)), bound_child.fst)
                  let limit_size_length = Nat.lte.sub_both(List.length(U8,Bytes.from_nat(List.length(U8,Ether.RLP.encode.many(rlps.head.child)))),8,1, limit_size_length)
                  let recover_prefix =
                    Nat.to_u8.safe_conversion(
                      Nat.add(56,Nat.add(192,Nat.sub(List.length(U8,Bytes.from_nat(List.length(U8,Ether.RLP.encode.many(rlps.head.child)))), 1)))
                      limit_size_length
                    )
                  case recover_prefix {
                    refl:
                      let lemma = Ether.RLP.aux.split.3(Ether.RLP.encode.many(rlps.head.child), Ether.RLP.encode.many(rlps.tail), remember_condition, bound_child.fst)
                      case lemma {
                        refl:
                          open bound.snd.snd as bound_tail
                          let ind_right = Ether.RLP.encode_identity.many(rlps.tail, bound_tail.fst)
                          let ind_left  = apply(Ether.RLP.node, Ether.RLP.encode_identity.many(rlps.head.child, bound_child.fst))
                          Equal.vapply(2)!!!!(ind_right)!!!(ind_left, List.cons(Ether.RLP))

                      }: Equal(List(Ether.RLP), lemma.b(() List(Ether.RLP),(head) (tail) List.cons(Ether.RLP,Ether.RLP.node(Ether.RLP.decode.many(head)),Ether.RLP.decode.many(tail))), List.cons(Ether.RLP,Ether.RLP.node(rlps.head.child),rlps.tail))
                  }: Equal(List(Ether.RLP), Nat.lte(recover_prefix.b,127,() List(Ether.RLP),List.cons(Ether.RLP,Ether.RLP.data(List.cons(U8,Nat.to_u8(Nat.add(56,Nat.add(192,Nat.sub(List.length(U8,Bytes.from_nat(List.length(U8,Ether.RLP.encode.many(rlps.head.child)))),1)))),List.nil(U8))),Ether.RLP.decode.many(List.concat(U8,List.concat(U8,Bytes.from_nat(List.length(U8,Ether.RLP.encode.many(rlps.head.child))),Ether.RLP.encode.many(rlps.head.child)),Ether.RLP.encode.many(rlps.tail)))),Nat.lte(recover_prefix.b,191,() List(Ether.RLP),Ether.RLP.split.length(128,List.concat(U8,List.concat(U8,List.cons(U8,Nat.to_u8(Nat.add(56,Nat.add(192,Nat.sub(List.length(U8,Bytes.from_nat(List.length(U8,Ether.RLP.encode.many(rlps.head.child)))),1)))),Bytes.from_nat(List.length(U8,Ether.RLP.encode.many(rlps.head.child)))),Ether.RLP.encode.many(rlps.head.child)),Ether.RLP.encode.many(rlps.tail)),() List(Ether.RLP),(head) (tail) List.cons(Ether.RLP,Ether.RLP.data(head),Ether.RLP.decode.many(tail))),Ether.RLP.split.length(192,List.concat(U8,List.concat(U8,List.cons(U8,Nat.to_u8(Nat.add(56,Nat.add(192,Nat.sub(List.length(U8,Bytes.from_nat(List.length(U8,Ether.RLP.encode.many(rlps.head.child)))),1)))),Bytes.from_nat(List.length(U8,Ether.RLP.encode.many(rlps.head.child)))),Ether.RLP.encode.many(rlps.head.child)),Ether.RLP.encode.many(rlps.tail)),() List(Ether.RLP),(head) (tail) List.cons(Ether.RLP,Ether.RLP.node(Ether.RLP.decode.many(head)),Ether.RLP.decode.many(tail))))), List.cons(Ether.RLP,Ether.RLP.node(rlps.head.child),rlps.tail))

//                 ?false-1110-10-1090-258-258

                }: Ether.RLP.decode.many(List.concat(U8,List.concat(U8,    self(    () Bytes,List.cons(U8,Nat.to_u8(Nat.add(192,List.length(U8,Ether.RLP.encode.many(rlps.head.child)))),List.nil(U8)),List.cons(U8,Nat.to_u8(Nat.add(56,Nat.add(192,Nat.sub(List.length(U8,Bytes.from_nat(List.length(U8,Ether.RLP.encode.many(rlps.head.child)))),1)))),Bytes.from_nat(List.length(U8,Ether.RLP.encode.many(rlps.head.child))))),Ether.RLP.encode.many(rlps.head.child)),Ether.RLP.encode.many(rlps.tail))) == List.cons(Ether.RLP,Ether.RLP.node(rlps.head.child),rlps.tail)
          }!
        )
      )
  }!
