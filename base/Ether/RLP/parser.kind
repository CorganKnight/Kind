Ether.RLP.parser: Parser(Ether.RLP)
  Parser {
    Kind.Parser.spaces
    get ret = Parser.choice!([
      Ether.RLP.parser.list
      Ether.RLP.parser.string
      Ether.RLP.parser.rlp_bytes
      Ether.RLP.parser.nat
    ])
    return ret
  }

Ether.RLP.parser.byte: Parser(U8)
  Parser {
    get snd = Parser.with_error!(Parser.hex_digit, "Expected hexadecimal digit.")
    get fst = Parser.with_error!(Parser.hex_digit, "Expected even number of hexadecimal digits.")
    return U8.or(U8.shl(U8.from_nat(snd), 4), U8.from_nat(fst))
  }

Ether.RLP.parser.bytes: Parser(Bytes)
  Parser.many1!(Ether.RLP.parser.byte)

Ether.RLP.parser.rlp_bytes: Parser(Ether.RLP)
    Parser.block!("hex_literal",
      Parser {
        Parser.text("0x")
        get bytes = Parser.many1!(Ether.RLP.parser.byte)
        return Ether.RLP.data(bytes)
      }
    )

    Ether.RLP.parser.nat: Parser(Ether.RLP)
    Parser.block!("nat",
      Parser {
        get n = Parser.nat
        return Ether.RLP.data.from_nat(n)
      }
    )

Ether.RLP.parser.string: Parser(Ether.RLP)
    Parser.block!("string",
      Parser {
        get str = Parser.string
        case String.is_ascii(str) {
          true:
            Parser {
              return Ether.RLP.data.from_str(str)
            }
          false:
            Parser.fail!("String literals must contain only ascii characters")
        }
      }
    )

Ether.RLP.parser.list: Parser(Ether.RLP)
    Parser.block!("list",
      Parser {
        get rlp_list = Kind.Parser.items!("[", Ether.RLP.parser, "]")
        return Ether.RLP.node(rlp_list)
      }
    )
