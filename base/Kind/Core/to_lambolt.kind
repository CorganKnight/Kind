// Converts a Kind.Core term to Lambolt
Kind.Core.to_lambolt(defs: Kind.Core.Defs): String
  let def_list = List.map!!((p) p@snd, Map.to_list!(defs))
  let st = Kind.Core.to_lambolt.Builder.aux.new(2, "(Z) = 0\n(Typ) = 1")
  let ret = {st, ""}
  for def in def_list with ret:
    let {st, head} = ret
    let {st, tail} = Kind.Core.Def.to_lambolt(def, st, {})
    {st, head|tail}
  let {st, code} = ret
  let {n, ids} = st
  ids|code


Kind.Core.to_lambolt.lam_ref: Bool
  true

Kind.Core.to_lambolt.let_ref: Bool
  false

Kind.Core.to_lambolt.get_idx: Kind.Core.to_lambolt.Builder(Nat)
  (st, ids)
    open st
    {{st.n + 1, st.ids} :: Kind.Core.to_lambolt.Builder.aux, st.n}

Kind.Core.to_lambolt.to_defname(name: String): String
  "("|String.capitalize(name)|")"

Kind.Core.to_lambolt.add_defname(name: String): Kind.Core.to_lambolt.Builder(Unit)
  (st, ids)
    open st
    {
      {st.n + 1, st.ids|"\n"|Kind.Core.to_lambolt.to_defname(name)|" = "|Nat.show(st.n)}
        :: Kind.Core.to_lambolt.Builder.aux
      unit
    }

Kind.Core.to_lambolt.add_var<A: Type>(
  b: Kind.Core.to_lambolt.Builder(A)
  id: String
): Kind.Core.to_lambolt.Builder(A)
  (st, ids)
    b(st, ids{id} <- Kind.Core.to_lambolt.lam_ref)

Kind.Core.to_lambolt.add_let<A: Type>(
  b: Kind.Core.to_lambolt.Builder(A)
  id: String
): Kind.Core.to_lambolt.Builder(A)
  (st, ids)
    b(st, ids{id} <- Kind.Core.to_lambolt.let_ref)

Kind.Core.to_lambolt.test_ref(id: String): Kind.Core.to_lambolt.Builder(Maybe<Bool>)
  (st, ids)
    {st, ids{id}}

//Kind.Core.to_lambolt.Builder.show(
//  st: Kind.Core.to_lambolt.Builder.aux
//): String
//  open st
//  "{\n"
//  |"  "|Nat.show(st.n)|",\n"
//  |"  "|st.ids|",\n"
//  |"  "|Map.show!((u) "*", st.local_binders)|"\n"
//  |"}"

Kind.Core.to_lambolt.handle_empty(
  str: String
): String
  case str {
    nil:
      "(Z)"
    cons:
      str
  }

// TODO add indentation level
Kind.Core.Term.to_lambolt(
  term: Kind.Core.Term
): Kind.Core.to_lambolt.Builder(String)
  case term {
    var:
      Kind.Core.to_lambolt.Builder {
        return 
          Kind.Core.to_lambolt.handle_empty(term.name)
      }
    ref:
      Kind.Core.to_lambolt.Builder {
        get cond = Kind.Core.to_lambolt.test_ref(term.name)
        let ret =
          case cond {
            some:
              if cond.value then
                Kind.Core.to_lambolt.handle_empty(term.name)
              else
                "(Ref ("
                |Kind.Core.to_lambolt.handle_empty(String.to_lower(term.name))
                |"))"
            none:
              "(Ref ("
              |Kind.Core.to_lambolt.handle_empty(String.capitalize(term.name))
              |"))"
          }
        return ret
      }
    typ:
      Kind.Core.to_lambolt.Builder {
        return "(Typ)"
      }
    all: 
      Kind.Core.to_lambolt.Builder {
        let eras = if term.eras then "(True)" else "(False)"
        get xtyp_code = Kind.Core.Term.to_lambolt(term.xtyp)
        get body_code = Kind.Core.to_lambolt.add_var!(
          Kind.Core.to_lambolt.add_var!(
            Kind.Core.Term.to_lambolt(
              term.body(Kind.Core.Term.ref(term.self), Kind.Core.Term.ref(term.name))
            )
            term.self
          )
          term.name
        )
        get let_name =
          case term.name {
            nil:
              Kind.Core.to_lambolt.Builder {
                return ""
              }
            cons:
              Kind.Core.to_lambolt.Builder {
                get name_n = Kind.Core.to_lambolt.get_idx
                return "\nlet "|term.name|" = "|Nat.show(name_n)
              }
          }
        get let_self =
          case term.self {
              nil:
                Kind.Core.to_lambolt.Builder {
                  return ""
                }
              cons:
                Kind.Core.to_lambolt.Builder {
                  get self_n = Kind.Core.to_lambolt.get_idx
                  return "\nlet "|term.self|" = "|Nat.show(self_n)
                }
          }
        return 
          let_self
          |let_name|"\n"
          |"(All "|eras|" "
          |Kind.Core.to_lambolt.handle_empty(term.self)|" "
          |Kind.Core.to_lambolt.handle_empty(term.name)|" "
          |xtyp_code|" 位"|term.self|" 位"|term.name|" "|body_code|")"
      }
    lam:
      Kind.Core.to_lambolt.Builder {
        let new_body = term.body(Kind.Core.Term.ref(term.name))
        get lam_body = Kind.Core.to_lambolt.add_var!(Kind.Core.Term.to_lambolt(new_body), term.name)
        return "位"|term.name|" "|lam_body
      }
    app:
      Kind.Core.to_lambolt.Builder {
        get fun = Kind.Core.Term.to_lambolt(term.func)
        get arg = Kind.Core.Term.to_lambolt(term.argm)
        return "(App "|fun|" "|arg|")"
      }
    let:
      Kind.Core.to_lambolt.Builder {
        get let_expr = Kind.Core.to_lambolt.add_let!(
          Kind.Core.Term.to_lambolt(term.expr)
          term.name
        )
        get let_body = Kind.Core.to_lambolt.add_var!(
          Kind.Core.Term.to_lambolt(term.body(Kind.Core.Term.ref(term.name)))
          term.name
        )
        get n = Kind.Core.to_lambolt.get_idx
        return "let "|term.name|" = "|Nat.show(n)|"\n(Let "|term.name|" "|let_expr|" 位"|term.name|" "|let_body|")"
      }
    ann:
      Kind.Core.to_lambolt.Builder {
        get expr = Kind.Core.Term.to_lambolt(term.expr)
        get type = Kind.Core.Term.to_lambolt(term.type)
        return "(Ann "|expr|" "|type|")"
      }
  }

Kind.Core.Def.to_lambolt(def: Kind.Core.Def): Kind.Core.to_lambolt.Builder(String)
  open def
  Kind.Core.to_lambolt.Builder {
    get type_code = Kind.Core.Term.to_lambolt(def.type)
    get term_code = Kind.Core.Term.to_lambolt(def.term)
    Kind.Core.to_lambolt.add_defname(def.name)
    return 
      "\n"
      |Kind.Core.to_lambolt.to_defname(def.name|"Def")
      |" =\n(Def "
      |Kind.Core.to_lambolt.to_defname(def.name)|" "
      |type_code|" "
      |term_code|")"
  }
