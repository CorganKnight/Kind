Kind.Code.highlight.pos: Type
  Maybe<Pair<Nat, Nat>>

Kind.Code.highlight(
  error: Maybe<String>,
  file: Maybe<String>,
  code: String,
  init: Nat,
  idx0: Nat,
  idx1: Nat,
): String
  let {pos, msg} = Kind.Code.highlight.go(code|" \n", init, idx0, idx1, 0, 1, Maybe.none!, String.reverse("   1 | "), [], none)
  let header = Kind.Code.highlight.header(error, file, pos)
  header | "\n" | msg

Kind.Code.highlight.header(
  error:  Maybe<String>,
  file: Maybe<String>
  pos: Kind.Code.highlight.pos
): String
  let space = if Maybe.is_some!(error) && Maybe.is_some!(file) then "\n" else ""
  let error = error <> ""
  let file = Maybe {
    get pos = pos
    let {row, col} = pos
    get file = file
    return "Inside '" | file | ":" | Nat.show(row) | ":" | Nat.show(col) | "':"
  } <> ""
  file | space | error


Kind.Code.highlight.end(
  col: Nat,
  row: Nat,
  res: List<String>,
): String
  String.join("\n", res)

Kind.Code.highlight.go(
  code: String,
  ixi: Nat,
  ix0: Nat,
  ix1: Nat,
  col: Nat,
  row: Nat,
  lft: Maybe<Nat>,
  lin: String,
  res: List<String>,
  pos: Kind.Code.highlight.pos
): Pair<Kind.Code.highlight.pos, String>
  //use skip = Debug.log!(String.flatten([
    //"ix0=", Nat.show(ix0), " ",
    //"ix1=", Nat.show(ix1), " ",
    //"col=", Nat.show(col), " ",
    //"row=", Nat.show(row), " ",
    //"lft=", case lft { none: "-", some: Nat.show(lft.value) }, " ",
    //"len=", Nat.show(String.length(code)), " ",
    //"chr=", Kind.Code.escape.char(case code { nil: '_', cons: code.head }), " ",
    //"res={", String.join("|", List.reverse!(res)), "}",
  //]))
  let spa = 3; // how many lines around error to show
  case code {
    nil:
      {pos, Kind.Code.highlight.end(col, row, List.reverse!(res))},
    cons:
      if U16.eql(code.head, '\n') then
        let stp = Maybe.extract!(lft)!(Bool.false, Nat.is_zero);
        if stp then
          {pos, Kind.Code.highlight.end(col, row, List.reverse!(res))}
        else
          let siz = Nat.succ(Nat.double(spa));
          let lft = case ix1 {
            zero: case lft {
              none: Maybe.some!(spa),
              some: Maybe.some!(Nat.pred(lft.value)),
            },
            succ: lft,
          };
          let ixi = Nat.pred(ixi);
          let ix0 = Nat.pred(ix0);
          let ix1 = Nat.pred(ix1);
          let col = 0;
          let row = Nat.succ(row);
          let res = List.cons!(String.reverse(lin), res);
          let lin = String.reverse(String.flatten([String.pad_left(4, ' ', Nat.show(row)), " | "]));
          Kind.Code.highlight.go(code.tail, ixi, ix0, ix1, col, row, lft, lin, res, pos)
      else
        let chr = String.cons(code.head, String.nil);
        let {chr, pos} =
          if Bool.and(Nat.is_zero(ix0), Bool.not(Nat.is_zero(ix1))) then
            let pos = Maybe.or!(pos, some({row, col+1}))
            {String.reverse(Kind.Code.color("41", Kind.Code.color("37", chr))), pos}
          else if Bool.and(Nat.is_zero(ixi), Bool.not(Nat.is_zero(ix1))) then
            {String.reverse(Kind.Code.color("31", Kind.Code.color("4", chr))), pos}
          else
            {chr, pos}
        let res = if Nat.eql(ix0,1) then List.take!(spa,res) else res;
        let ixi = Nat.pred(ixi);
        let ix0 = Nat.pred(ix0);
        let ix1 = Nat.pred(ix1);
        let col = Nat.succ(col);
        let lin = String.flatten([chr, lin]);
        Kind.Code.highlight.go(code.tail, ixi, ix0, ix1, col, row, lft, lin, res, pos)
  }
