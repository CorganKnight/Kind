U1024.lcm.list(list: List<U1024>): U1024
  let size = List.length<U1024>(list)
  if size =? 1 then
    List.head_with_default<U1024>(0#1024, list)
  else
    U1024.lcm.list.go(list, 1)



U1024.lcm.list.go(lcm: List<U1024>, r: U1024): U1024
  let list =  List.delete_by<U1024>(U1024.eql ,0#1024, lcm)
  let list =  List.delete_by<U1024>(U1024.eql ,1#1024, list)
  let list =  List.sort<U1024>(U1024.cmp, list)
  let list = List.unique<U1024>(U1024.eql, list)
  log(List.show!(U1024.show, list))
  case list { 
    nil: r 
    cons:
      let {even, odd} = U1024.lcm.list.split(list)
      let empty_even = List.is_empty<U1024>(even)
      if empty_even then
        U1024.lcm.list.odd(odd) * r
      else
        let lcm_even = U1024.lcm.list.even(even)
        let odd = lcm_even@snd ++ odd
        U1024.lcm.list.go(odd, lcm_even@fst)
  }


//Deal with even numbers
U1024.lcm.list.even(lcm: List<U1024>): Pair<U1024, List<U1024>>//result, odd
  U1024.lcm.list.even.go(lcm , [], 1)


//Deal with odd numbers
U1024.lcm.list.odd(lcm: List<U1024>): U1024
  U1024.lcm.list.odd.go(lcm, 3, 1)


//Split the list between even and odd numbers
//[2, 4, 6] -> Pair.fst
//[1, 3, 5] -> Pair.snd
U1024.lcm.list.split(lcm: List<U1024>): Pair<List<U1024>, List<U1024>> //odd, even
  let result = {[], []}
  for num in lcm with result:
    if (num % 2) =? 0 then
      let list_even = List.append<U1024>(result@fst, num)
      {list_even, result@snd}
    else
      let list_odd = List.append<U1024>(result@snd, num)
      {result@fst, list_odd}
result



U1024.lcm.list.even.go(lcm: List<U1024>, odds: List<U1024>, r: U1024): Pair<U1024, List<U1024>>
  let list =  List.delete_by<U1024>(U1024.eql ,0#1024, lcm)
  let list =  List.delete_by<U1024>(U1024.eql ,1#1024, list)
  let result = {false, {[], odds}}:: Pair<Bool, Pair<List<U1024>, List<U1024>>>
  for num in list with result:
    let new_num = num/2
    if (new_num % 2) =? 0 then
      let list_even = List.append<U1024>(result@snd@fst, new_num)
      {true, {list_even, result@snd@snd}}
    else
      let list_odd = List.append<U1024>(result@snd@snd, new_num)
      {result@fst, {result@snd@fst, list_odd}}


  let new_even =  List.sort<U1024>(U1024.cmp, result@snd@fst)
  let new_even = List.unique<U1024>(U1024.eql, new_even)
  let new_odd =  List.sort<U1024>(U1024.cmp, result@snd@snd)
  let new_odd = List.unique<U1024>(U1024.eql, new_odd)
  let r_even = r * 2
  if result@fst then
    U1024.lcm.list.even.go(new_even, new_odd, r*2)
  else
    {r_even, new_odd}



U1024.lcm.list.odd.go(lcm: List<U1024>, div: U1024, r: U1024): U1024
  let list =  List.delete_by<U1024>(U1024.eql ,1#1024, lcm)
  let size = List.length<U1024>(list)
  if size =? 1 then 
    r * List.head_with_default<U1024>(0#1024, list)
  else
    let result = {false, []}
    for num in list with result:
      if (num % div) =? 0 then
        let divided = num / div
        let new_list = List.append<U1024>(result@snd, divided)
        {true, new_list}
      else
        {result@fst, List.cons<U1024>(num, result@snd)}

    if result@fst then
      U1024.lcm.list.odd.go(result@snd, div, div * r)
    else
      case list { 
        nil: r
        cons: 
          U1024.lcm.list.odd.go(result@snd, div + 2, r)
      }
